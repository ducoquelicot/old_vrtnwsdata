{"ast":null,"code":"var _jsxFileName = \"/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Citizen/index.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport styles from './style';\nexport default class Citizen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.references = {\n      citizen: React.createRef()\n    };\n    this.state = {\n      xCoord: `${Math.round(Math.random() * 90) + 5}%`,\n      yCoord: `${Math.round(Math.random() * 90) + 5}%`\n    };\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  animate() {\n    switch (this.props.phase) {\n      case 1:\n        this.animatePhase1();\n        break;\n\n      case 2:\n        this.animatePhase2();\n        break;\n\n      default:\n        this.animatePhase1();\n    }\n  }\n\n  animatePhase1() {\n    const {\n      duration,\n      index,\n      skinTone,\n      guilty\n    } = this.props;\n    const steps = 4;\n    const timePerStep = duration / steps;\n    const delay = timePerStep * 0.75 * (index / 100);\n    const animationTime = timePerStep * 0.25;\n\n    if (skinTone === 'white') {\n      d3.select(this.references.citizen.current).style('opacity', 0).transition().delay(timePerStep).transition().delay(delay).duration(animationTime).style('opacity', 1.0);\n    }\n\n    if (skinTone === 'black') {\n      d3.select(this.references.citizen.current).style('opacity', 0).transition().delay(timePerStep * 2).transition().delay(delay).duration(animationTime).style('opacity', 1.0);\n    }\n\n    if (guilty) {\n      d3.select(this.references.citizen.current).transition().delay(timePerStep * 3).transition().delay(delay).duration(animationTime * 2).style('stroke', 'red').attr('stroke-width', 3);\n    }\n\n    d3.select(this.references.citizen.current).transition().delay(duration).duration(animationTime).style('opacity', 0);\n  }\n\n  animatePhase2() {\n    if (Math.round() >= 0.5) {}\n  }\n\n  render() {\n    const {\n      skinTone\n    } = this.props;\n    const {\n      xCoord,\n      yCoord\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"circle\", {\n      ref: this.references.citizen,\n      style: styles.circle,\n      cx: xCoord,\n      cy: yCoord,\n      r: \"0.75%\",\n      stroke: \"black\",\n      fill: skinTone,\n      strokeWidth: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Citizen/index.js"],"names":["React","d3","styles","Citizen","PureComponent","constructor","props","references","citizen","createRef","state","xCoord","Math","round","random","yCoord","componentDidMount","animate","phase","animatePhase1","animatePhase2","duration","index","skinTone","guilty","steps","timePerStep","delay","animationTime","select","current","style","transition","attr","render","circle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport styles from './style';\n\nexport default class Citizen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.references = { citizen: React.createRef() };\n\n    this.state = {\n      xCoord : `${Math.round(Math.random() * 90) + 5}%`,\n      yCoord : `${Math.round(Math.random() * 90) + 5}%`\n    }\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  animate() {\n    switch (this.props.phase) {\n      case 1:\n        this.animatePhase1();\n        break;\n      case 2:\n        this.animatePhase2();\n        break;\n      default:\n        this.animatePhase1();\n    }\n  }\n\n  animatePhase1() {\n    const { duration, index, skinTone, guilty } = this.props;\n    const steps = 4;\n    const timePerStep = duration / steps;\n    const delay = (timePerStep * 0.75) * (index / 100);\n    const animationTime = timePerStep * 0.25;\n\n    if (skinTone === 'white') {\n      d3.select(this.references.citizen.current)\n        .style('opacity', 0)\n\n        .transition()\n        .delay(timePerStep)\n        .transition()\n        .delay(delay)\n        .duration(animationTime)\n        .style('opacity', 1.0);\n    }\n\n    if (skinTone === 'black') {\n      d3.select(this.references.citizen.current)\n        .style('opacity', 0)\n\n        .transition()\n        .delay(timePerStep * 2)\n        .transition()\n        .delay(delay)\n        .duration(animationTime)\n        .style('opacity', 1.0);\n    }\n\n    if (guilty) {\n      d3.select(this.references.citizen.current)\n        .transition()\n        .delay(timePerStep * 3)\n        .transition()\n        .delay(delay)\n        .duration(animationTime * 2)\n        .style('stroke', 'red')\n        .attr('stroke-width', 3);\n    }\n\n    d3.select(this.references.citizen.current)\n      .transition()\n      .delay(duration)\n      .duration(animationTime)\n      .style('opacity', 0)\n  }\n\n\n  animatePhase2() {\n      if (Math.round() >= 0.5) {\n\n      }\n  }\n\n  render() {\n    const { skinTone } = this.props;\n    const { xCoord, yCoord } = this.state;\n    return (\n      <circle ref={this.references.citizen} style={styles.circle}\n        cx={xCoord}\n        cy={yCoord}\n        r=\"0.75%\"\n        stroke=\"black\"\n        fill={skinTone}\n        strokeWidth=\"1\"\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}