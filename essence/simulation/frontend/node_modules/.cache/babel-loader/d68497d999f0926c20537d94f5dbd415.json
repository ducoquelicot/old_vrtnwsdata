{"ast":null,"code":"var _jsxFileName = \"/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Simulation/index.js\";\nimport React from 'react';\nimport Human from '../../generators/Human';\nimport Citizen from '../Citizen';\nimport Narrator from '../Narrator';\nimport styles from './style';\nimport Titles from '../Titles';\nimport Bars from '../Bars';\nexport default class Simulation extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.citizenAmount = 100;\n    this.durationPhase1 = 25000; // ms\n\n    this.durationPhase2 = 10000; // ms\n\n    this.durationPhase3 = 10000; // ms\n\n    this.delayBetweenPhases = 1000; //ms\n\n    this.state = {\n      citizens: [],\n      phase: 1,\n      duration: this.durationPhase1,\n      percentageWhite: 0,\n      percentageBlack: 0\n    };\n  }\n\n  componentDidMount() {\n    this.generatePopulation();\n    this.startPhaseCountdown();\n  }\n\n  startPhaseCountdown() {\n    const delayPhase2 = this.durationPhase1 + this.delayBetweenPhases;\n    const delayPhase3 = this.durationPhase1 + this.durationPhase2 + this.delayBetweenPhases * 2;\n    setTimeout(() => {\n      const countWhite = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'white').length;\n      const countBlack = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'black').length;\n      const totalWhite = this.state.citizens.filter(citizen => citizen.control && citizen.skinTone === 'white').length;\n      const totalBlack = this.state.citizens.filter(citizen => citizen.control && citizen.skinTone === 'black').length;\n      const percentageWhite = countWhite / totalWhite * 100;\n      const percentageBlack = countBlack / totalBlack * 100;\n      this.setState({\n        duration: this.durationPhase2,\n        phase: 2,\n        percentageWhite,\n        percentageBlack\n      });\n    }, delayPhase2);\n    setTimeout(() => {\n      this.setState({\n        duration: this.durationPhase3,\n        phase: 3\n      });\n    }, delayPhase3);\n  }\n\n  generatePopulation() {\n    const population = [];\n\n    for (let index = 0; index < this.citizenAmount; index++) {\n      population.push(new Human({\n        index\n      }));\n    }\n\n    this.setState({\n      citizens: population\n    });\n  }\n\n  renderCitizens() {\n    const {\n      citizens,\n      duration,\n      phase\n    } = this.state;\n    let whiteCount = 0;\n    let blackCount = 0;\n    return citizens.map(citizen => {\n      whiteCount = citizen.skinTone === 'white' && citizen.control ? whiteCount + 1 : whiteCount;\n      blackCount = citizen.skinTone === 'black' && citizen.control ? blackCount + 1 : blackCount;\n      return /*#__PURE__*/React.createElement(Citizen, {\n        key: citizen.index,\n        index: citizen.index,\n        duration: duration,\n        phase: phase,\n        skinTone: citizen.skinTone,\n        guilty: citizen.guilty,\n        name: citizen.name,\n        count: citizen.skinTone === 'white' ? whiteCount : blackCount,\n        control: citizen.control,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 16\n        }\n      });\n    });\n  }\n\n  render() {\n    const {\n      duration,\n      phase,\n      percentageBlack,\n      percentageWhite\n    } = this.state;\n    const citizens = this.renderCitizens();\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      style: styles.svg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, citizens, /*#__PURE__*/React.createElement(Narrator, {\n      phase: phase,\n      duration: duration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Titles, {\n      phase: phase,\n      duration: duration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Bars, {\n      phase: phase,\n      duration: duration,\n      percentageWhite: percentageWhite,\n      percentageBlack: percentageBlack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Simulation/index.js"],"names":["React","Human","Citizen","Narrator","styles","Titles","Bars","Simulation","PureComponent","constructor","props","citizenAmount","durationPhase1","durationPhase2","durationPhase3","delayBetweenPhases","state","citizens","phase","duration","percentageWhite","percentageBlack","componentDidMount","generatePopulation","startPhaseCountdown","delayPhase2","delayPhase3","setTimeout","countWhite","filter","citizen","control","guilty","skinTone","length","countBlack","totalWhite","totalBlack","setState","population","index","push","renderCitizens","whiteCount","blackCount","map","name","render","console","log","svg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Human from '../../generators/Human';\nimport Citizen from '../Citizen';\nimport Narrator from '../Narrator';\nimport styles from './style';\nimport Titles from '../Titles';\nimport Bars from '../Bars';\n\nexport default class Simulation extends React.PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.citizenAmount = 100;\n    this.durationPhase1 = 25000; // ms\n    this.durationPhase2 = 10000; // ms\n    this.durationPhase3 = 10000; // ms\n    this.delayBetweenPhases = 1000; //ms\n\n    this.state = {\n      citizens: [],\n      phase: 1,\n      duration: this.durationPhase1,\n      percentageWhite: 0,\n      percentageBlack: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.generatePopulation();\n    this.startPhaseCountdown();\n  }\n\n  startPhaseCountdown() {\n    const delayPhase2 = this.durationPhase1 + this.delayBetweenPhases;\n    const delayPhase3 = this.durationPhase1 + this.durationPhase2 + (this.delayBetweenPhases * 2);\n\n    setTimeout(() => {\n\n      const countWhite = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'white').length  \n      const countBlack = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'black').length  \n\n      const totalWhite = this.state.citizens.filter(citizen => citizen.control && citizen.skinTone === 'white').length\n      const totalBlack = this.state.citizens.filter(citizen => citizen.control && citizen.skinTone === 'black').length\n\n      const percentageWhite = countWhite / totalWhite * 100\n      const percentageBlack = countBlack / totalBlack * 100\n\n      this.setState({ \n        duration: this.durationPhase2, \n        phase: 2,\n        percentageWhite,\n        percentageBlack,\n      });\n    }, delayPhase2);\n\n    setTimeout(() => {\n      this.setState({ duration: this.durationPhase3, phase: 3 });\n    }, delayPhase3);\n  }\n\n  generatePopulation() {\n    const population = [];\n    for (let index = 0; index < this.citizenAmount; index++) {\n      population.push(new Human({ index }));\n    }\n    this.setState({ citizens: population });\n  }\n\n  renderCitizens() {\n    const { citizens, duration, phase } = this.state;\n\n    let whiteCount = 0\n    let blackCount = 0\n\n    return (\n      citizens.map(citizen => {\n        \n        whiteCount = citizen.skinTone === 'white' && citizen.control ? whiteCount + 1 : whiteCount\n        blackCount = citizen.skinTone === 'black' && citizen.control ? blackCount + 1 : blackCount\n\n        return <Citizen\n          key={citizen.index}\n          index={citizen.index}\n          duration={duration}\n          phase={phase}\n          skinTone={citizen.skinTone}\n          guilty={citizen.guilty}\n          name={citizen.name}\n          count={citizen.skinTone === 'white' ? whiteCount : blackCount}\n          control={citizen.control}\n        />;\n      })\n    );\n  }\n\n  render() {\n    const { duration, phase, percentageBlack, percentageWhite } = this.state;\n    const citizens = this.renderCitizens();\n\n    console.log(this.state);\n    return (\n      <svg style={styles.svg}>\n        {citizens}\n        <Narrator phase={phase} duration={duration} />\n        <Titles phase={phase} duration={duration} />\n        <Bars phase={phase} duration={duration} percentageWhite={percentageWhite} percentageBlack={percentageBlack} />\n      </svg>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}