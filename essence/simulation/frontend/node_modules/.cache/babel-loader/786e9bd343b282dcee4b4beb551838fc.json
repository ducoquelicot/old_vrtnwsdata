{"ast":null,"code":"var _jsxFileName = \"/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Simulation/index.js\";\nimport React from 'react';\nimport Human from '../../generators/Human';\nimport Citizen from '../Citizen';\nimport Narrator from '../Narrator';\nimport styles from './style';\nimport Titles from '../Titles';\nimport Bars from '../Bars';\nexport default class Simulation extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.citizenAmount = 100;\n    this.durationPhase1 = 15000; // ms\n\n    this.durationPhase2 = 10000; // ms\n    // this.durationPhase3 = 10000; // ms\n\n    this.delayBetweenPhases = 10000; //ms\n\n    this.state = {\n      citizens: [],\n      phase: 1,\n      duration: this.durationPhase1,\n      percentageWhite: 0,\n      percentageBlack: 0\n    };\n  }\n\n  componentDidMount() {\n    this.generatePopulation();\n    this.startPhaseCountdown();\n  }\n\n  startPhaseCountdown() {\n    const delayPhase2 = this.durationPhase1 + this.delayBetweenPhases; // const delayPhase3 = this.durationPhase1 + this.durationPhase2 + (this.delayBetweenPhases * 2);\n\n    setTimeout(() => {\n      console.log(this.state.citizens);\n      const countWhite = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'white').length;\n      const countBlack = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'black').length;\n      const totalGuilty = this.state.citizens.filter(citizen => citizen.control && citizen.guilty).length;\n      const percentageWhite = countWhite / totalGuilty * 100;\n      const percentageBlack = countBlack / totalGuilty * 100;\n      this.setState({\n        duration: this.durationPhase2,\n        phase: 2,\n        percentageWhite,\n        percentageBlack\n      });\n    }, delayPhase2); // setTimeout(() => {\n    //   this.setState({ duration: this.durationPhase3, phase: 3 });\n    // }, delayPhase3);\n  }\n\n  generatePopulation() {\n    const population = [];\n\n    for (let index = 0; index < this.citizenAmount; index++) {\n      population.push(new Human({\n        index\n      }));\n    }\n\n    this.setState({\n      citizens: population\n    });\n  }\n\n  renderCitizens() {\n    const {\n      citizens,\n      duration,\n      phase\n    } = this.state;\n    let whiteCount = 0;\n    let blackCount = 0;\n    return citizens.map((citizen, i, arr) => {\n      // scenario 3\n      const previous = arr[i - 1];\n\n      if (citizen.skinTone === 'white') {\n        var controlChance = () => Math.random() >= 0.8;\n\n        citizen.control = controlChance();\n      } else if (previous === undefined && citizen.skinTone === 'black') {\n        controlChance = () => Math.random() >= 0.2;\n\n        citizen.control = controlChance();\n      } else if (previous.skinTone === 'black' && citizen.skinTone === 'black') {\n        controlChance = () => Math.random() >= 0.1;\n\n        citizen.control = controlChance();\n      } else if (previous.skinTone === 'white' && citizen.skinTone === 'black') {\n        controlChance = () => Math.random() >= 0.2;\n\n        citizen.control = controlChance();\n      }\n\n      whiteCount = citizen.skinTone === 'white' && citizen.control ? whiteCount + 1 : whiteCount;\n      blackCount = citizen.skinTone === 'black' && citizen.control ? blackCount + 1 : blackCount;\n      return /*#__PURE__*/React.createElement(Citizen, {\n        key: citizen.index,\n        index: citizen.index,\n        duration: duration,\n        phase: phase,\n        skinTone: citizen.skinTone,\n        guilty: citizen.guilty,\n        name: citizen.name,\n        count: citizen.skinTone === 'white' ? whiteCount : blackCount,\n        control: citizen.control,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 16\n        }\n      });\n    });\n  }\n\n  render() {\n    const {\n      duration,\n      phase,\n      percentageBlack,\n      percentageWhite,\n      betweenPhase\n    } = this.state;\n    const citizens = this.renderCitizens();\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      style: styles.svg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, citizens, /*#__PURE__*/React.createElement(Narrator, {\n      phase: phase,\n      duration: duration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Titles, {\n      phase: phase,\n      duration: duration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Bars, {\n      phase: phase,\n      duration: duration,\n      percentageWhite: percentageWhite,\n      percentageBlack: percentageBlack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/fmeijer/Desktop/vrtnws_data/essence/simulation/frontend/src/components/Simulation/index.js"],"names":["React","Human","Citizen","Narrator","styles","Titles","Bars","Simulation","PureComponent","constructor","props","citizenAmount","durationPhase1","durationPhase2","delayBetweenPhases","state","citizens","phase","duration","percentageWhite","percentageBlack","componentDidMount","generatePopulation","startPhaseCountdown","delayPhase2","setTimeout","console","log","countWhite","filter","citizen","control","guilty","skinTone","length","countBlack","totalGuilty","setState","population","index","push","renderCitizens","whiteCount","blackCount","map","i","arr","previous","controlChance","Math","random","undefined","name","render","betweenPhase","svg"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Human from '../../generators/Human';\nimport Citizen from '../Citizen';\nimport Narrator from '../Narrator';\nimport styles from './style';\nimport Titles from '../Titles';\nimport Bars from '../Bars';\n\nexport default class Simulation extends React.PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.citizenAmount = 100;\n    this.durationPhase1 = 15000; // ms\n    this.durationPhase2 = 10000; // ms\n    // this.durationPhase3 = 10000; // ms\n    this.delayBetweenPhases = 10000; //ms\n\n    this.state = {\n      citizens: [],\n      phase: 1,\n      duration: this.durationPhase1,\n      percentageWhite: 0,\n      percentageBlack: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.generatePopulation();\n    this.startPhaseCountdown();\n  }\n\n  startPhaseCountdown() {\n    const delayPhase2 = this.durationPhase1 + this.delayBetweenPhases;\n    // const delayPhase3 = this.durationPhase1 + this.durationPhase2 + (this.delayBetweenPhases * 2);\n\n    setTimeout(() => {\n      console.log(this.state.citizens)\n      const countWhite = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'white').length \n      const countBlack = this.state.citizens.filter(citizen => citizen.control && citizen.guilty && citizen.skinTone === 'black').length  \n\n      const totalGuilty = this.state.citizens.filter(citizen => citizen.control && citizen.guilty).length\n\n      const percentageWhite = countWhite / totalGuilty * 100\n      const percentageBlack = countBlack / totalGuilty * 100\n\n      this.setState({ \n        duration: this.durationPhase2, \n        phase: 2,\n        percentageWhite,\n        percentageBlack,\n      });\n    }, delayPhase2);\n\n    // setTimeout(() => {\n    //   this.setState({ duration: this.durationPhase3, phase: 3 });\n    // }, delayPhase3);\n  }\n\n  generatePopulation() {\n    const population = [];\n    for (let index = 0; index < this.citizenAmount; index++) {\n      population.push(new Human({ index }));\n    }\n    this.setState({ citizens: population });\n  }\n\n  renderCitizens() {\n    const { citizens, duration, phase } = this.state;\n\n    let whiteCount = 0\n    let blackCount = 0\n\n    return (\n      citizens.map((citizen, i, arr) => {\n        // scenario 3\n        const previous = arr[i-1]\n\n        if (citizen.skinTone === 'white') {\n          var controlChance = () => Math.random() >= 0.8;\n          citizen.control = controlChance();\n        }\n        else if (previous === undefined && citizen.skinTone === 'black') {\n          controlChance = () => Math.random() >= 0.2;\n          citizen.control = controlChance();\n        }\n        else if (previous.skinTone === 'black' && citizen.skinTone === 'black') {\n          controlChance = () => Math.random() >= 0.1;\n          citizen.control = controlChance();\n        }\n        else if (previous.skinTone === 'white' && citizen.skinTone === 'black') {\n          controlChance = () => Math.random() >= 0.2;\n          citizen.control = controlChance();\n        }\n\n        whiteCount = citizen.skinTone === 'white' && citizen.control ? whiteCount + 1 : whiteCount\n        blackCount = citizen.skinTone === 'black' && citizen.control ? blackCount + 1 : blackCount\n        \n        return <Citizen\n          key={citizen.index}\n          index={citizen.index}\n          duration={duration}\n          phase={phase}\n          skinTone={citizen.skinTone}\n          guilty={citizen.guilty}\n          name={citizen.name}\n          count={citizen.skinTone === 'white' ? whiteCount : blackCount}\n          control={citizen.control}\n        />;\n      })\n    );\n  }\n\n  render() {\n    const { duration, phase, percentageBlack, percentageWhite, betweenPhase } = this.state;\n    const citizens = this.renderCitizens();\n\n    console.log(this.state);\n    return (\n      <svg style={styles.svg}>\n        {citizens}\n        <Narrator phase={phase} duration={duration} />\n        <Titles phase={phase} duration={duration} />\n        <Bars phase={phase} duration={duration} percentageWhite={percentageWhite} percentageBlack={percentageBlack} />\n      </svg>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}